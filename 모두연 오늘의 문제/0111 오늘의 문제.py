"""
# 문제 1
다음 숫자 중 5보다 크고, 20보다 작으면서 짝수인 수를 모두 더하는 코드를 완성 해주세요. 오늘 배운 filter 사용은 필수 입니다.

"""
# number = [1, 5, 7, 4, 3, 22, 23, 15, 26, 17, 3]

# def solution(data):
#     return sum(filter(lambda x: 5 < x < 20 and x % 2 == 0, data))

# print(solution(number)) # 0


"""
# 문제 2
다음의 정보가 담겨져 있는 것을 Class로 만들어주세요. 
메서드로는 '할인' 메서드를 만들어주세요. 예를 들어 아래 책을 10% 할인한다고 하면 4500원이 됩니다. 
책.할인(10) == 4500의 형태로 만들어주시면 됩니다.
"""

# obj = {
#     '책제목': 'hello world python',
#     '책내용': 'hello world...',
#     '저자': '이호준',
#     '발행일': '2024-01-11',
#     '가격': 5000
# }

# class Book(object):
#     def __init__(self, obj):
#         for key, value in obj.items():
#             setattr(self, key, value)
    
#     def discount(self, 할인률):
#         할인가격 = int(self.가격 - (self.가격 * 할인률/100))
#         return f"{할인률}% 할인되어 {할인가격}원 입니다."
    
# my_book = Book(obj)
# print(my_book.discount(10)) # 10% 할인되어 4500원 입니다.

"""
# 문제 3 : 게임 밸런스 조절

## 문제 설명
라이캣은 연말 출시할 게임의 게임 난이도를 조절하는 업무를 담당하게 되었습니다. 우선 능력치가 비정상적으로 높은 캐릭터들의 리스트를 뽑고자 합니다. 캐릭터 이름, 공격력, 방어력, 체력, 마력이 리스트로 ['Licat', 98, 30, 21, 60]와 같이 주어졌을 때 모든 능력치의 합이 350 이상이 되는 캐릭터의 이름을 출력하는 solution함수를 완성해주세요.

## 제한 사항
  - 3 ≤ 캐릭터의 수 ≤ 10
  - 10 ≤ 능력치 ≤ 100
  - 350이 넘는 캐릭터의 이름은 알파벳 순으로 출력합니다.

## 입력 예
[['Licat', 98, 92, 85, 97], ['Mura', 95, 32, 51, 30], ['Binky', 98, 98, 51, 32]]
[['Gray', 98, 92, 85, 97], ['Gom', 98, 30, 21, 60], ['Allosa', 98, 90, 99, 98]]

## 출력 예
['Licat']
['Allosa', 'Gary']
"""

# input = [['Licat', 98, 92, 85, 97], ['Mura', 95, 32, 51, 30], ['Binky', 98, 98, 51, 32]]
# input = [['Gray', 98, 92, 85, 97], ['Gom', 98, 30, 21, 60], ['Allosa', 98, 90, 99, 98]]

# def solution(data):
#     result = []
#     for i in data:
#         name = i[:1]
#         if sum(i[1:]) >= 350:
#             result.append(name[0])
#     return (sorted(result))

# print(solution(input))

"""
# 문제 4 : 주간 최고 온도 기록 분석

## 문제 설명
일주일 동안의 최고 기온이 기록된 데이터가 주어집니다. 
이 데이터에서 가장 높은 온도를 기록한 상위 3일을 찾아 'YY-MM-DD: 온도' 형식으로 반환하는 코드를 작성해주세요. 
데이터는 'YYYY-MM-DD' 형식의 날짜와 해당 날짜의 최고 온도(섭씨)로 구성됩니다.

## 제한 사항
  - 각 날짜의 최고 온도는 정수로 주어집니다.
  - 기온 데이터는 최소 7개(일주일)에서 최대 30개(한달)까지 주어질 수 있습니다.
  - 날짜는 중복되지 않습니다.
  - 중복된 온도일 경우 날짜가 빠른 것이 앞에 정렬되어야 합니다.

## 입력 예
{'2024-01-01': 15, '2024-01-02': 17, '2024-01-03': 16, '2024-01-04': 20, '2024-01-05': 19, '2024-01-06': 21, '2024-01-07': 18}

## 출력 예
['24-01-06: 21', '24-01-04: 20', '24-01-05: 19']
"""

# input = {'2024-01-01': 15, '2024-01-02': 17, '2024-01-03': 16, '2024-01-04': 20, '2024-01-05': 19, '2024-01-06': 21, '2024-01-07': 18}

# def solution(data):
#     result = []
#     sorted_dict = sorted(data.items(), key = lambda item: item[1], reverse=True)[:3]

#     for key, value in sorted_dict:
#         result.append(f"{key[2:]}: {value}")

#     return result

# print(solution(input))